.. _relational-migrator-get-started:

====================================
Get Started with Relational Migrator
====================================

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :description: MongoDB Relational Migrator is a tool to help you migrate your relational workloads to MongoDB.
   :keywords: database migration, database conversion

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Relational Migrator is a tool to help you migrate your relational 
data to MongoDB. This page guides you through installing the tool 
and running your first migration job.

To get familiar with Relational Migrator capabilities, 
features, and use cases, review the following resources:

- :ref:`<supported-databases>`
-  :ref:`<rm-migration-scenarios>`
- `Relational Migrator Learning Byte <https://learn.mongodb.com/courses/mongodb-relational-migrator>`__

Steps
-----

.. procedure::

   .. step:: Install

      You can install Relational Migrator with a
      :ref:`single machine install <local-machine-install>` suitable 
      for testing or a :ref:`unattended server install <unattended-server>` 
      for production workloads.

   .. step:: Create a project

      To start using Relational Migrator,
      :ref:`create a project <rm-projects>`. Projects hold the 
      settings, schema conversion logic, and table mappings for a 
      migration. You can connect to source and destination databases with the
      appropriate :ref:`connection strings <rm-connection-strings>` and save
      the source and destination :ref:`database connections <rm-database-connections>`.
      

   .. step:: Create mapping rules with suggested mappings

      Use :ref:`suggested mappings<rm-new-rules-from-mappings>` to 
      create initial mapping rules based on your 
      relational schema. Mapping rules specify how data from each 
      relational table migrates to MongoDB and how columns map to 
      fields in MongoDB documents.

   .. step:: Customize your mapping rules

      Add or update :ref:`mapping rules <rm-mapping-rules>` to create 
      the destination data model that best matches your 
      application needs.

   .. step:: Create a migration job

      :ref:`Migration jobs <rm-sync-jobs>` move the data from relational 
      tables to MongoDB collections. Migration jobs have two types: 

      - **Snapshot** for point in time migrations. 
      - **Continuous** for ongoing change data capture zero-downtime migrations.

      To start your migration to MongoDB, 
      :ref:`create a migration job <rm-create-jobs>`.

.. toctree::
   :titlesonly:
   :hidden:

   Supported Databases & Versions </getting-started/supported-databases>
   Migration Scenarios </getting-started/migration-scenarios>
   User Interface </getting-started/overview>
   Log In with Atlas </getting-started/atlas-log-in>
