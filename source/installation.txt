.. _installation:

============
Installation
============

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

This page provides an overview of Relational Migrator's supported 
deployment models, recommended deployment models for specific use cases,
and deployment considerations.

.. _rm-deployment-considerations:

Supported Deployment Models
---------------------------

The following table describes Relational Migrator's supported deployment models, 
and the recommended migration scenario for each deployment model:

.. list-table::
   :header-rows: 1

   * - Deployment Model

     - Description

     - Recommended scenario

   * - Local

     - Install Relational Migrator to a single machine that cannot 
       be externally accessed.

       For more information, see :ref:`<local-machine-install>`.

     - Evaluation and proof of concept jobs that run for less than four hours.
    
   * - Docker

     - Install Relational Migrator in a way that is simple to replicate
       and independent of the operating system.

       For more information, see :ref:`<rm-install-docker>`.

     - Evaluation and proof of concept jobs that run for less than four hours,
       and do not run directly on a server or machine.
       

   * - Unattended server

     - Install Relational Migrator on an unattended server that binds Relational 
       Migrator to an IP address and exposes it as a web application.
       
       For more information, see :ref:`<unattended-server>`.

     - Small production jobs with runtimes between four hours and four weeks
       that involve a database smaller than 20GB.
      

   * - Kafka

     - `Apache Kafka <https://kafka.apache.org/>`__ is an open-source platform for distributed 
       workloads.

       Use Relational Migrator as a Kafka Connect plugin to improve resilience and scalibility
       of big data migration jobs.

       For more information, see :ref:`kafka-intro`.

     - Production data migrations that run longer than four weeks, or involve databases larger than 20GB.

       

   * - Kafka with Confluent Cloud

     - `Confluent  <https://www.confluent.io/>`__ is a fully-managed Kafka hosting 
       provider run by the founders of Kafka. 

       Use APIs to add the newest Relational Migrator sink connectors to Confluent Cloud
       as managed connectors.

       For more information, see :ref:`install-confluent-kafka`.

     - Production jobs with the reliability of Kafka without having to manage your own cluster.


Deployment Considerations
-------------------------

Where to Run Relational Migrator
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For best performance, locate the machine or server running Relational 
Migrator as geographically close to the source and target databases as 
possible. Proximity to the target database influences performance
the most: 

- If you're using Relational Migrator for an on-premises migration, 
  run Relational Migrator in the same data center as the source 
  database.

- If you're using a cloud hosted database, run Relational 
  Migrator on an EC2 instance or VM in the same 
  :abbr:`VPC (Virtual Private Cloud)` as the source database.

.. tip::

   Check the sleep timeout setting for your operating system. If your 
   machine goes to sleep during a migration, the migration job fails.

Network Considerations
~~~~~~~~~~~~~~~~~~~~~~

When using Relational Migrator, the system firewall on the machine or 
server must allow outbound TCP traffic to both the source and 
destination databases.

Cloud Networking
''''''''''''''''

When running Relational Migrator in a cloud environment, check the 
cloud specific firewall (security group), router table, and 
the server firewall configurations. For details on specific cloud 
provider network configurations, see these pages:

- `AWS Networking <https://docs.aws.amazon.com/vpc/>`__
- `Azure Networking <https://azure.microsoft.com/en-us/products/category/networking>`__
- `GCP Networking <https://cloud.google.com/vpc/docs>`__

Telemetry
'''''''''

By default, Relational Migrator includes telemetry that reports usage 
information and errors back to MongoDB to help improve the product. 
This telemetry does not include any sensitive details such as database 
connection strings, schema information or customer data. 

You can disable telemetry by editing the application's
``user.properties`` file, adding the following line, and restarting 
Relational Migrator:

.. code-block::

   migrator.app.telemetry.enable: false 

System Hardware
~~~~~~~~~~~~~~~

For specific hardware recommendations, see :ref:`rm-system-requirements`.

.. note::

  Scaling up the Atlas cluster size can significantly improve migration
  speeds. For details, see :ref:`scale-cluster-instance`.

Get Started
-----------

- For local and Docker deployment installation instructions, see :ref:`<local-machine-install>`
- For unattended server and Kafka deployment installation instructions, see
  :ref:`Install on an Unattended Server <unattended-server>`

.. toctree::
   :hidden:
   :titlesonly:

   System Requirements </installation/system-requirements>
   Developer Installation Guide </installation/install-on-a-local-machine>
   Production Installation Guide </installation/install-on-an-unattended-server>
   Application Settings </installation/application-settings>
