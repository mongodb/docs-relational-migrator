.. _rm-example-insurance-data:

==============================
Example: Insurance Data Models
==============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

In this tutorial, you will use the {+rel-mig+} to transform a 21-table schema 
into a simple five-collection MongoDB model.

About this Task
---------------

In the sample data set, all people, organizations, and groups are represented as 
Parties, which can be related to other major objects with specified roles. The 
Party design also provides a common approach for describing communication 
identifiers, relationships between parties, and legal identifiers.

After you connect to your PostgreSQL database, you will use the 
{+rel-mig+} to port the Object Management Group’s 
`Party Role model <https://www.omg.org/spec/PC/1.0/PDF>`__ from a relational 
structure to MongoDB’s document model.

Before You Begin 
----------------

This example requires the following applications:

- {+mdb-rel-mig+} version 1.4.3 or higher

- MongoDB version 7.0 or higher: Ensure you have access to a MongoDB instance 
  with write permissions to create the new database to where you will migrate 
  the data. You can install the latest version of MongoDB Community or deploy a 
  free MongoDB Atlas cluster.

- PostgreSQL version 16 or higher: Ensure you have access to a PostgreSQL 
  database server instance with permissions to create a new database and user. 
  The instance can be in the cloud, on-prem, or on your local machine. In 
  addition to PostgreSQL, install the following PostgreSQL Client Applications:
  
  - `psql <https://www.postgresql.org/docs/15/app-psql.html>`__: a command-line 
    application that allows you to interactively type in queries, issue them to 
    PostgreSQL, and see the query results.
    
  - `pg_restore <https://www.postgresql.org/docs/15/app-pgrestore.html>`__: A 
    command-line application that restores the PostgreSQL database from the 
    sample archive file. 

Additionally, download the ``mongodb_insurance_model.tar`` 
`sample archive file <https://github.com/mongodb-industry-solutions/insurance-relational-refactoring>`__. 
This file contains all the tables, relationships, and sample data from the Party 
Role model in a tabular format.

To replicate the Party Role model in PostgreSQL, follow the following steps: 

.. procedure:: 
   :style: normal 

   .. step:: Connect to the PostgreSQL database 

      .. code-block:: 
         
         psql -h <host> -p <port> -U <user> -d <database>

      If you have a newly installed local instance with default 
      parameters, use ``127.0.0.1`` as your host, ``5432`` as your 
      port, ``postgres`` as your database, and type ``whoami`` in your 
      terminal for a default username.

   .. step:: Create a database to load your data 

      .. code-block:: 
         
         CREATE DATABASE mongodb_insurance_model;

   .. step:: Create a user that has access to the new database 

      .. code-block:: 
         
         CREATE USER istadmin WITH PASSWORD `<password>`;
         ALTER DATABASE mongodb_insurance_model OWNER TO istadmin;
      
      Ensure that you replace ``<password>`` with a strong password of 
      your choice.

   .. step:: Populate the database with the Party Role model. 

      Navigate to the folder where you downloaded the archive file's 
      backup of the database and run the following command to load the 
      data: 

      .. code-block:: 
         
         pg_restore -h <host> -p <port> -U <user> -d mongodb_insurance_model mongodb_insurance_model.tar

   .. step:: Verify the successful restore of the database 

      .. code-block:: 

         psql -h <host> -p <port> -U <user>-d mongodb_insurance_model -c "SELECT * FROM pg_catalog.pg_tables WHERE schemaname='omg';"

      You should see a list of 21 tables similar to the following image: 

      .. image:: /img/mapping-rules/mapping-rule-insurance-tables.png
         :alt: List of 21 tables in the Party Role model

Steps 
-----

The following steps guide you through connecting to your PostgreSQL database and 
refactoring Party entities into MongoDB documents:

.. procedure:: 
   :style: normal

   .. step:: Create a new project in {+rel-mig+}

      Click :guilabel:`New Project` at the top-right of the {+rel-mig+} 
      home screen.

   .. step:: Connect to your PostgreSQL database

      Click the :guilabel:`Connect to Database` button and select 
      :guilabel:`PostgreSQL` in the drop-down menu. Enter the connection 
      details for your PostgreSQL instance, including the host, port,
      user, and password. 

      Ensure that you test your connection before you click 
      :guilabel:`Connect`. If you receive a ``no encryption`` error, click 
      on the :guilabel:`SSL` tab and enable :guilabel:`Use SSL`.
   
   .. step:: Select all tables from the OMG schema in the mongodb_insurance_model database 

      After you select all the tables in the database, click 
      :guilabel:`Next`.

   .. step:: Define your schema

      Under :guilabel:`Initial mappings`, ensure that you select 
      :guilabel:`Start with a MongoDB schema that matches your relational schema`
      and click :guilabel:`Next`. 

   .. step:: Name your project 

   .. step:: Click Done 

      This generates a schema where each collection corresponds to a table in 
      the original relational schema.

   .. step:: Refactor the Party domain 

      .. procedure:: 
         :style: connected
         
         .. step:: From the MongoDB view, click the ``party`` collection

            On the right side of the screen, the :guilabel:`Mappings` menu 
            opens.

         .. step:: Add mappings for the person, organization, and grouping collections

            Next to :guilabel:`Mappings to MongoDB Model`, click 
            :guilabel:`Add`. Click :guilabel:`Embedded documents` and select 
            :guilabel:`person` from the :guilabel:`Source table` drop-down menu.

            After you click :guilabel:`Save and close`, repeat this process for 
            the :guilabel:`organization` and :guilabel:`grouping` tables.

         .. step:: Add mappings for the party_location_address collection

            Next to :guilabel:`Mappings to MongoDB Model`, click 
            :guilabel:`Add` and select :guilabel:`Embedded array`. Choose 
            :guilabel:`party_location_address` from the 
            :guilabel:`Parent collection` drop-down menu. 

            Under the :guilabel:`All fields` checkbox, deselect the 
            ``partyIdentifier`` field and click :guilabel:`Save and close`.

         .. step:: Add mappings for the location_address 

            To include the address information within the  
            ``party_location_address`` collection, click 
            :guilabel:`Add` and select :guilabel:`Embedded document`. Choose 
            :guilabel:`location_address` from the :guilabel:`Source table` 
            drop-down menu. 
            
            Click :guilabel:`Save and close`.

   .. step:: Refactor the Policy domain 

      .. procedure:: 
         :style: connected
         
         .. step:: From the MongoDB view, click the policy collection

            On the right side of the screen, the :guilabel:`Mappings` menu 
            opens.

         .. step:: Add mappings for the policy_party_role collection

            Next to :guilabel:`Mappings to MongoDB Model`, click 
            :guilabel:`Add`. Click :guilabel:`Embedded array` and select 
            :guilabel:`policy_party_role` from the :guilabel:`Source table` 
            drop-down menu.

            Under the :guilabel:`All fields` checkbox, deselect the 
            ``partyIdentifier`` field and click :guilabel:`Save and close`.

         .. step:: Add mappings for the agreement collection

            Next to :guilabel:`Mappings to MongoDB Model`, click 
            :guilabel:`Add` and select :guilabel:`Embedded document`. Choose 
            :guilabel:`agreement` from the :guilabel:`Source table` drop-down 
            menu. 

            Click :guilabel:`Save and close`.

         .. step:: Add mappings for the policy_coverage_part collection

            To include the coverage information from the  
            ``policy_coverage_part`` collection, click 
            :guilabel:`Add` and select :guilabel:`Embedded array`. Choose 
            :guilabel:`policy_coverage_part` from the :guilabel:`Source table` 
            drop-down menu. 

            Under the :guilabel:`All fields` checkbox, deselect the 
            ``policyIdentifier`` field and click :guilabel:`Save and close`.

         .. step:: Embed policy_coverage_detail information under policyCoverageParts

            To include the coverage details from the  
            ``policy_coverage_detail`` collection, click 
            :guilabel:`Add` and select :guilabel:`Embedded array`. Choose 
            :guilabel:`policy_coverage_detail` from the :guilabel:`Source table` 
            drop-down menu and ensure that the :guilabel:`Root path` prefix is 
            ``policyCoverageParts``.

            Under the :guilabel:`All fields` checkbox, deselect the 
            ``policyIdentifier`` and ``coveragePartCode`` fields, and click 
            :guilabel:`Save and close`.

         .. step:: Add mappings for the insurabe_object collection 

            To include the coverage information from the  ``insurable_object`` 
            collection, click :guilabel:`Add` and select 
            :guilabel:`Embedded array`. Choose :guilabel:`insurable_object` 
            from the :guilabel:`Source table` drop-down menu. 

         .. step:: Embed policy_limit, policy_deductible, and insurabe_object information 

            To include ``policy_limit`` information, click :guilabel:`Add` and 
            select :guilabel:`Embedded array`. Choose :guilabel:`policy_limit` 
            from the :guilabel:`Source table` drop-down menu and ensure that the 
            :guilabel:`Root path` prefix is ``policyCoverageParts``.

            Under the :guilabel:`All fields` checkbox, deselect the 
            ``policyCoverageDetailIdentifier`` field and click 
            :guilabel:`Save and close`.

            Repeat the process for ``policy_deductible``. For ``insurable_object``, 
            select :guilabel:`Embedded document` instead of 
            :guilabel:`Embedded array`.

         .. step:: Embed insurable_object_party_role 

            Insurable objects have additional relationships to specify the 
            address and roles played by the different parties. To include this 
            information, click :guilabel:`Add` and select
            :guilabel:`Embedded array`. Choose 
            :guilabel:`insurable_object_party_role` from the 
            :guilabel:`Source table` drop-down menu. 

            Under the :guilabel:`All fields` checkbox, deselect the 
            ``insurableObjectIdentifier`` field and click 
            :guilabel:`Save and close`.

         .. step:: Remove referenced collections

            After you add all necessary mappings, you can remove the 
            ``policyCoveragePart``, ``policyCoverageDetail``, 
            ``policyDeductible``, and ``policyLimit`` collections from the MDB 
            view of {+rel-mig+}.

   .. step:: Refactor the Claim domain

      .. procedure:: 
         :style: connected 

         .. step:: From the MongoDB view, click the claim collection

            On the right side of the screen, the :guilabel:`Mappings` menu 
            opens.

         .. step:: Embed the claim_party_role table 

            Next to :guilabel:`Mappings to MongoDB Model`, click 
            :guilabel:`Add`. Click :guilabel:`Embedded array` and select 
            :guilabel:`claim_party_role` from the :guilabel:`Source table` 
            drop-down menu.

            Under the :guilabel:`All fields` checkbox, deselect the 
            ``claimIdentifier`` field and click :guilabel:`Save and close`.

         .. step:: Embed the insurable_object table under the claim collection 

            Next to :guilabel:`Mappings to MongoDB Model`, click
            :guilabel:`Add` and select :guilabel:`Embedded diocuments`. Choose 
            :guilabel:`insurable_object` from the :guilabel:`Source table` 
            drop-down menu. 

            Click :guilabel:`Save and close`.

         .. step:: Embed the policy_coverage_detail table within insurableObject 

            Next to :guilabel:`Mappings to MongoDB Model`, click
            :guilabel:`Add` and select :guilabel:`Embedded array`. Choose
            :guilabel:`policy_coverage_detail` from the :guilabel:`Source table`
            drop-down menu.

            Under the :guilabel:`All fields` checkbox, deselect the 
            ``insurableObjectIdentifier`` field, and click 
            :guilabel:`Save and close`.


Learn More
----------


