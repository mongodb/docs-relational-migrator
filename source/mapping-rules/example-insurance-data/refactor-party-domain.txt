.. _rm-example-refactor-party-domain:

=========================
Refactor the Party Domain
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

About this Task 
---------------

A Party includes the following key entities: 

- **Party**: Represents people, organizations, and groups.

- **Party Role**: Defines the role of a Party in relation to other objects, 
  such as: 

  - Policy 
  - Claim 
  - Agreement 
  - Litigation 
  - Insurable Object

- **Communication Identity**: Includes information such as the email, phone, and 
  address for a Party. 

In the original PostgreSQL schema, parties are represented through one-to-one 
relationships. The Party table holds the common attributes for all parties, 
while the other tables store specific information for each party class. These 
differences result in distinct fields for each class, which forces tabular 
schemas like PostgreSQL to create new tables. You can embed all this information 
under a single MongoDB document by adding mappings for each table in the 
relational database. 

Before You Begin
----------------

Refactoring the Party domain is the second step of the :ref:`insurance data 
model example tutorial <rm-example-insurance-data>`. Before you refactor the 
Party domain, :ref:`connect to your PostgreSQL database <rm-example-connect>` 
in {+rel-mig+}.

Steps 
-----

.. procedure:: 
   :style: normal

   .. step:: From the MongoDB view of {+rel-mig+}, click the party collection
      
      On the right side of the screen, the :guilabel:`Mappings` menu opens.

   .. step:: Add mappings for the person, organization, and grouping tables

      Next to :guilabel:`Mappings to MongoDB Model`, click :guilabel:`Add`. 
      Click :guilabel:`Embedded documents` and select :guilabel:`person` from 
      the :guilabel:`Source table` drop-down menu.
      
      After you click :guilabel:`Save and close`, repeat this process for the 
      :guilabel:`organization` and :guilabel:`grouping` source tables.
      
   .. step:: Add mappings for the party_location_address table
    
      Next to :guilabel:`Mappings to MongoDB Model`, click :guilabel:`Add` and 
      select :guilabel:`Embedded array`. Choose 
      :guilabel:`party_location_address` from the 
      :guilabel:`Parent collection` drop-down menu. 

      Under the :guilabel:`All fields` checkbox, deselect the 
      ``partyIdentifier`` field and click :guilabel:`Save and close`.

   .. step:: Add mappings for the location_address 

      To include the address information within the  ``party_location_address`` 
      collection, click :guilabel:`Add` and select 
      :guilabel:`Embedded document`. Choose :guilabel:`location_address` from 
      the :guilabel:`Source table` drop-down menu. 
      
      Click :guilabel:`Save and close`.

   .. step:: Remove collections that are no longer needed 
      
      Now that you mapped all the necessary tables to the ``party`` collection, 
      you can delete the following collections from the MongoDB view of 
      {+rel-mig+}:

      - ``person``
      - ``organization``
      - ``grouping``
      - ``party_location_address``

      .. important:: 

         Don't delete the ``location_address`` collection, as it still has an 
         existing relationship with the ``insurable_object`` table that we'll 
         add mapping rules for in a later step.
    

Next Steps
----------

After you map the Party domain, you can refactor the Policy domain in a similar 
manner. See :ref:`rm-example-refactor-policy-domain`.
