.. _rm-mapping-rules:

=============
Mapping Rules
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

A mapping rule specifies where data from each relational table should be
migrated to and how the columns should be mapped to fields in 
MongoDB documents. Mapping rules are created inside a project after you have provided a 
valid :ref:`relational database connection string and credentials <rm-relational-database-connection-strings>`.

MongoDB Schema Design Patterns
------------------------------

Schema design patterns in MongoDB shape how your data is organized. 
Good schema design practices ensure efficient storage, retrieval, and 
manipulation of your data. These design decisions can improve the 
performance and scalability of your MongoDB deployment. Relational 
Migrator allows you to make key schema design decisions such as 
combining multiple tables into a single collection or embedding data 
in your documents.

For an overview of schema design best practices, review the following 
documentation:

- :ref:`data-modeling-patterns`.

- `Building with Patterns
  <https://www.mongodb.com/blog/post/building-with-patterns-a-summary>`__.

- `Summary of Schema Design Anti-Patterns and How to Spot Them
  <https://www.mongodb.com/developer/products/mongodb/schema-design-anti-pattern-summary/>`__.

Mapping Direction Preference
----------------------------

The source relational model is static and unchanging while the target MongoDB model
is dynamic and customizable.

You can create a mapping rule based on a source :ref:`relational model <create-rule-relational>`
or based on a destination :ref:`MongoDB model <create-rule-mongodb>`.

Relationships
-------------

Mapping rules help define a ``one-to-one``, ``one-to-many``, or ``many-to-many`` 
relationship between your tables and collections.

You can define mapping rules for the following configurations: 

- A single table that maps to a single MongoDB collection. 

- A single table that maps to multiple MongoDB collections. 

- Multiple tables that map into a single collection.

Default Rules
-------------

Relational Migrator automatically creates a :ref:`New Documents mapping rule <rm-new-documents>`
for each source table. This initial rule produces a MongoDB schema that
is identical to the relational database. You can edit the initial rule 
before running any data migration jobs.

Data Type Detection
-------------------

Relational Migrator automatically selects the best MongoDB data type for each 
source column.

For example, SQL Server source data of types ``text``, ``varchar``,
``nvarchar`` or ``char``  will become the MongoDB ``string`` data type. 

Preview Mapping Rules
---------------------

.. include:: /includes/mapping-options-preview.rst

Migrate as Options
------------------

Mapping rules can be defined with the following ``Migrate as`` options:

.. list-table::
   :header-rows: 1

   * - Option
     - Behavior

   * - :ref:`Migrate rows as New Documents <rm-new-documents>`
     - Translates each relational database row to a new document.

   * - :ref:`Migrate rows as Embedded array <rm-embedded-array>`
     - Translates each row into an array element within a parent document identified by a foreign key   
       relationship.

   * - :ref:`Migrate rows as Embedded documents <rm-embedded-documents>`
     - Translates each row as a set of fields or an embedded object in a child document identified by a foreign key relationship.

.. toctree::
   :titlesonly:
   :hidden:

   Schema Mapping </mapping-rules/schema-mapping>
   Create Rules from Relational </mapping-rules/new-rules-from-relational>
   Create Rules to MongoDB </mapping-rules/new-rules-to-mongodb>
   Use Suggested Mappings </mapping-rules/new-rules-suggested-mappings>
   View Rules </mapping-rules/view-rules>
   Edit Rules </mapping-rules/edit-rules>
   Delete Rules </mapping-rules/delete-rules>
   Rule Options </mapping-rules/mapping-rule-options/introduction>
   Fields </mapping-rules/fields/field-customizations>
   Synthetic Foreign Keys </mapping-rules/synthetic-foreign-key/synthetic-foreign-keys>
